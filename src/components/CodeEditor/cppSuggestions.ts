import * as monaco from "monaco-editor";

export const getCppSuggestions = (
  range: monaco.IRange,
  monacoInstance: typeof monaco
): monaco.languages.CompletionItem[] => {
  return [
    // C++ Keywords
    { label: 'if', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: if statement', insertText: 'if', range },
    { label: 'else', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: else statement', insertText: 'else', range },
    { label: 'for', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: for loop', insertText: 'for', range },
    { label: 'while', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: while loop', insertText: 'while', range },
    { label: 'do', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: do-while loop', insertText: 'do', range },
    { label: 'switch', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: switch statement', insertText: 'switch', range },
    { label: 'case', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: case statement', insertText: 'case', range },
    { label: 'break', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: break statement', insertText: 'break', range },
    { label: 'continue', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: continue statement', insertText: 'continue', range },
    { label: 'return', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: return statement', insertText: 'return', range },
    { label: 'class', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: class definition', insertText: 'class', range },
    { label: 'struct', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: struct definition', insertText: 'struct', range },
    { label: 'public', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: public access specifier', insertText: 'public', range },
    { label: 'private', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: private access specifier', insertText: 'private', range },
    { label: 'protected', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: protected access specifier', insertText: 'protected', range },
    { label: 'static', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: static modifier', insertText: 'static', range },
    { label: 'const', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: const modifier', insertText: 'const', range },
    { label: 'virtual', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: virtual function', insertText: 'virtual', range },
    { label: 'override', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: override specifier', insertText: 'override', range },
    { label: 'new', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: new operator', insertText: 'new', range },
    { label: 'delete', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: delete operator', insertText: 'delete', range },
    { label: 'this', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: this pointer', insertText: 'this', range },
    { label: 'true', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: boolean true', insertText: 'true', range },
    { label: 'false', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: boolean false', insertText: 'false', range },
    { label: 'nullptr', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: null pointer', insertText: 'nullptr', range },
    { label: 'void', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: void type', insertText: 'void', range },
    { label: 'int', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: int type', insertText: 'int', range },
    { label: 'long', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: long type', insertText: 'long', range },
    { label: 'short', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: short type', insertText: 'short', range },
    { label: 'char', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: char type', insertText: 'char', range },
    { label: 'float', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: float type', insertText: 'float', range },
    { label: 'double', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: double type', insertText: 'double', range },
    { label: 'bool', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: bool type', insertText: 'bool', range },
    { label: 'auto', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: auto type', insertText: 'auto', range },
    { label: 'size_t', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: size_t type', insertText: 'size_t', range },
    { label: 'typedef', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: typedef', insertText: 'typedef', range },
    { label: 'using', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: using directive', insertText: 'using', range },
    { label: 'namespace', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: namespace', insertText: 'namespace', range },
    { label: 'template', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: template', insertText: 'template', range },
    { label: 'typename', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: typename', insertText: 'typename', range },
    { label: 'try', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: try block', insertText: 'try', range },
    { label: 'catch', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: catch block', insertText: 'catch', range },
    { label: 'throw', kind: monacoInstance.languages.CompletionItemKind.Keyword, detail: 'C++ keyword: throw exception', insertText: 'throw', range },
    
    // C++ Standard Library
    { label: 'iostream', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: iostream header', insertText: 'iostream', range },
    { label: 'vector', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: vector container', insertText: 'vector', range },
    { label: 'string', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: string container', insertText: 'string', range },
    { label: 'algorithm', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: algorithm header', insertText: 'algorithm', range },
    { label: 'map', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: map container', insertText: 'map', range },
    { label: 'unordered_map', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: unordered_map container', insertText: 'unordered_map', range },
    { label: 'set', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: set container', insertText: 'set', range },
    { label: 'unordered_set', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: unordered_set container', insertText: 'unordered_set', range },
    { label: 'queue', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: queue container', insertText: 'queue', range },
    { label: 'stack', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: stack container', insertText: 'stack', range },
    { label: 'deque', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: deque container', insertText: 'deque', range },
    { label: 'priority_queue', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: priority_queue container', insertText: 'priority_queue', range },
    { label: 'list', kind: monacoInstance.languages.CompletionItemKind.Module, detail: 'C++ STL: list container', insertText: 'list', range },
    
    // C++ Common Functions
    { label: 'cout', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::cout output stream', insertText: 'cout', range },
    { label: 'cin', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::cin input stream', insertText: 'cin', range },
    { label: 'cerr', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::cerr error stream', insertText: 'cerr', range },
    { label: 'endl', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::endl line ending', insertText: 'endl', range },
    { label: 'max', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::max function', insertText: 'max', range },
    { label: 'min', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::min function', insertText: 'min', range },
    { label: 'swap', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::swap function', insertText: 'swap', range },
    { label: 'sort', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::sort function', insertText: 'sort', range },
    { label: 'reverse', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::reverse function', insertText: 'reverse', range },
    { label: 'find', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::find function', insertText: 'find', range },
    { label: 'count', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::count function', insertText: 'count', range },
    { label: 'accumulate', kind: monacoInstance.languages.CompletionItemKind.Function, detail: 'C++: std::accumulate function', insertText: 'accumulate', range },
    { label: 'size', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: container size() method', insertText: 'size', range },
    { label: 'push_back', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: vector push_back() method', insertText: 'push_back', range },
    { label: 'pop_back', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: vector pop_back() method', insertText: 'pop_back', range },
    { label: 'emplace_back', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: vector emplace_back() method', insertText: 'emplace_back', range },
    { label: 'begin', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: container begin() method', insertText: 'begin', range },
    { label: 'end', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: container end() method', insertText: 'end', range },
    { label: 'empty', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: container empty() method', insertText: 'empty', range },
    { label: 'clear', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: container clear() method', insertText: 'clear', range },
    { label: 'insert', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: container insert() method', insertText: 'insert', range },
    { label: 'erase', kind: monacoInstance.languages.CompletionItemKind.Method, detail: 'C++: container erase() method', insertText: 'erase', range },
  ];
};

